from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

user_data = {}
ADMIN_IDS = [1406491528, 6108824933]  # –ü—Ä–æ–≤–µ—Ä—å ID –∞–¥–º–∏–Ω–æ–≤!
pending_messages = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    first_name = update.effective_user.first_name
    last_name = update.effective_user.last_name or "–§–∞–º–∏–ª–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    user_id = update.effective_user.id

    user_data[user_id] = {'name': first_name, 'surname': last_name}
    await update.message.reply_text(f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name} {last_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ ‚òïÔ∏è!")
    await show_menu(update, context)

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [[InlineKeyboardButton("üõé –ó–∞–∫–∞–∑", callback_data='order')],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'order':
        await ask_coffee_type(query, context)
    elif query.data == 'help':
        await query.edit_message_text("üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/start - –Ω–∞—á–∞—Ç—å\n/menu - –º–µ–Ω—é\n/help - –ø–æ–º–æ—â—å")

async def ask_coffee_type(query, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –≤–∏–¥–∞ –∫–æ—Ñ–µ"""
    keyboard = [[InlineKeyboardButton("Cappuccino", callback_data='Cappuccino')],
                [InlineKeyboardButton("Espresso", callback_data='Espresso')],
                [InlineKeyboardButton("Coffee", callback_data='Coffee')],
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='cancel')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ:", reply_markup=reply_markup)

async def handle_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == 'cancel':
        await show_menu(update, context)
        return

    user_data[user_id]['coffee'] = query.data
    await ask_cups(query, context)

async def ask_cups(query, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—à–µ–∫"""
    keyboard = [[InlineKeyboardButton("1 —á–∞—à–∫–∞", callback_data='1')],
                [InlineKeyboardButton("2 —á–∞—à–∫–∏", callback_data='2')],
                [InlineKeyboardButton("3 —á–∞—à–∫–∏", callback_data='3')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='order')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–°–∫–æ–ª—å–∫–æ —á–∞—à–µ–∫ –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=reply_markup)

async def handle_cups_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == 'order':
        await ask_coffee_type(query, context)
        return

    user_data[user_id]['cups'] = int(query.data)
    await ask_payment(query, context)

async def ask_payment(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø–ª–∞—Ç–∞"""
    user_id = query.from_user.id
    price = 10000 * user_data[user_id]['cups']
    keyboard = [[InlineKeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ", callback_data='cash')],
                [InlineKeyboardButton("–û–Ω–ª–∞–π–Ω", callback_data='online')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='cups')]]

    if user_id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='skip')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ {price} —Å—É–º. –ö–∞–∫ –±—É–¥–µ—Ç–µ –ø–ª–∞—Ç–∏—Ç—å? ", reply_markup=reply_markup)

async def handle_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É"""
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == 'cups':
        await ask_cups(query, context)
        return

    payment = '–ù–∞–ª–∏—á–Ω—ã–µ' if query.data == 'cash' else '–û–Ω–ª–∞–π–Ω' if query.data == 'online' else '–ü—Ä–æ–ø—É—â–µ–Ω–æ'
    user_data[user_id]['payment'] = payment

    order_text = (f"‚òïÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
                  f"–ö–ª–∏–µ–Ω—Ç: {user_data[user_id]['name']} {user_data[user_id]['surname']}\n"
                  f"–ö–æ—Ñ–µ: {user_data[user_id]['coffee']}\n"
                  f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_data[user_id]['cups']} —á–∞—à–µ–∫\n"
                  f"–û–ø–ª–∞—Ç–∞: {payment}")

    keyboard = [[InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data=f"ready_{user_id}")],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{user_id}")],
                [InlineKeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"message_{user_id}")]]

    for admin in ADMIN_IDS:
        try:
            await context.bot.send_message(admin, order_text, reply_markup=InlineKeyboardMarkup(keyboard))
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin}: {e}")

    await query.message.reply_text(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ ‚òïÔ∏è. 9860190101149374")
    await show_menu(update, context)

async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞"""
    query = update.callback_query
    data = query.data.split('_')
    action, user_id = data[0], int(data[1])

    if action == 'ready':
        await context.bot.send_message(user_id, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ ‚òïÔ∏è.")
        await query.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    elif action == 'cancel':
        await context.bot.send_message(user_id, "‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        await query.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    elif action == 'message':
        pending_messages[query.from_user.id] = user_id
        await query.message.reply_text("üì© –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:")
        await query.answer()

async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞"""
    admin_id = update.message.from_user.id
    if admin_id in pending_messages:
        user_id = pending_messages.pop(admin_id)
        await context.bot.send_message(user_id, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{update.message.text}")
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í—ã –Ω–µ –≤—ã–±–∏—Ä–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.")

def main():
    TOKEN = "7982381260:AAGkAt7u-eEMYtiaYQL17fWgKgs978_3Gpg"
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_IDS), handle_admin_message))
    app.add_handler(CallbackQueryHandler(handle_callback, pattern="^(order|help)$"))
    app.add_handler(CallbackQueryHandler(handle_order_callback, pattern="^(Cappuccino|Espresso|Coffee|cancel)$"))
    app.add_handler(CallbackQueryHandler(handle_cups_callback, pattern="^[123]$"))
    app.add_handler(CallbackQueryHandler(handle_payment_callback, pattern="^(cash|online|skip|cups)$"))
    app.add_handler(CallbackQueryHandler(admin_callback, pattern="^(ready|cancel|message)_\\d+$"))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl + C –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è ")
    app.run_polling()

if __name__ == "__main__":
    main()
