from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    first_name = update.effective_user.first_name
    user_id = update.effective_user.id
    user_data[user_id] = {}
    await notify_all_users(context)
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {first_name}, —ç—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –∫–æ—Ñ–µ‚òïÔ∏è‚òïÔ∏è.")
    await update.message.reply_text("‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ –∏–º—è.")
    user_data[user_id]['step'] = 'name'

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_id not in user_data or 'step' not in user_data[user_id]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    step = user_data[user_id]['step']

    if step == 'name':
        user_data[user_id]['name'] = text
        user_data[user_id]['step'] = 'surname'
        await update.message.reply_text("‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é.")

    elif step == 'surname':
        user_data[user_id]['surname'] = text
        user_data[user_id]['step'] = 'phone'
        await update.message.reply_text("üì±–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

    elif step == 'phone':
        user_data[user_id]['phone'] = text
        name = user_data[user_id]['name']
        surname = user_data[user_id]['surname']
        user_data[user_id]['step'] = 'menu'
        await update.message.reply_text(f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name} {surname}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        await show_menu(update, context)

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üõé–ó–∞–∫–∞–∑üõé", callback_data='order')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == 'order':
        await ask_coffee_type(query, context)

async def ask_coffee_type(query: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Cappuccino", callback_data='Cappuccino')],
        [InlineKeyboardButton("Espresso", callback_data='Espresso')],
        [InlineKeyboardButton("Coffee", callback_data='Coffee')],
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞ üîô", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∫–æ—Ñ–µ:", reply_markup=reply_markup)

async def handle_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == 'cancel':
        await query.edit_message_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        user_data[user_id]['step'] = 'menu'
        await show_menu(update, context)
        return

    if query.data in ['Cappuccino', 'Espresso', 'Coffee']:
        user_data[user_id]['coffee'] = query.data
        await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {query.data}.")
        await ask_sugar(query, context)

async def ask_sugar(query: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞", callback_data='–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞')],
        [InlineKeyboardButton("1 –ª–æ–∂–∫–∞", callback_data='1 –ª–æ–∂–∫–∞')],
        [InlineKeyboardButton("2 –ª–æ–∂–∫–∏", callback_data='2 –ª–æ–∂–∫–∏')],
        [InlineKeyboardButton("3 –ª–æ–∂–∫–∏", callback_data='3 –ª–æ–∂–∫–∏')],
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞ üîô", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–°–∫–æ–ª—å–∫–æ –ª–æ–∂–µ–∫ —Å–∞—Ö–∞—Ä–∞ –ø–æ–ª–æ–∂–∏—Ç—å –≤ –∫–æ—Ñ–µ?", reply_markup=reply_markup)

async def handle_sugar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == 'cancel':
        await query.edit_message_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        user_data[user_id]['step'] = 'menu'
        await show_menu(update, context)
        return

    if query.data in ['–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞', '1 –ª–æ–∂–∫–∞', '2 –ª–æ–∂–∫–∏', '3 –ª–æ–∂–∫–∏']:
        user_data[user_id]['sugar'] = query.data
        await ask_payment(query, context)

async def ask_payment(query: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ", callback_data='cash')],
        [InlineKeyboardButton("–û–Ω–ª–∞–π–Ω (click –Ω–∞ –∫–∞—Å—Å–µ)", callback_data='online')],
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞ üîô", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–ö–∞–∫ –±—É–¥–µ—Ç–µ üí∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—åüí∏?", reply_markup=reply_markup)

async def handle_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == 'cancel':
        await query.edit_message_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        user_data[user_id]['step'] = 'menu'
        await show_menu(update, context)
        return

    if query.data in ['cash', 'online']:
        user_data[user_id]['payment'] = '–ù–∞–ª–∏—á–Ω—ã–µ' if query.data == 'cash' else '–û–Ω–ª–∞–π–Ω'
        user_data[user_id]['step'] = 'menu'
        await send_order_to_admin(context.bot, user_id)
        await query.edit_message_text(f"–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, {user_data[user_id]['name']}!")
        await show_menu(update, context)

async def send_order_to_admin(bot, user_id):
    admin_id = "1406491528"
    order = user_data[user_id]
    order_message = (
        f"**–ó–∞–∫–∞–∑ üõé**\n\n"
        f"–ò–º—è: {order['name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {order['surname']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
        f"–í–∏–¥ –∫–æ—Ñ–µ: {order['coffee']}\n"
        f"–°–∞—Ö–∞—Ä: {order['sugar']}\n"
        f"–û–ø–ª–∞—Ç–∞: {order['payment']}\n"
    )
    keyboard = [
        [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data=f"ready_{user_id}")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{user_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await bot.send_message(chat_id=admin_id, text=order_message, parse_mode="Markdown", reply_markup=reply_markup)

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    if data.startswith("ready_"):
        user_id = int(data.split("_")[1])
        name = user_data[user_id]['name']
        surname = user_data[user_id]['surname']
        await context.bot.send_message(chat_id=user_id, text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name} {surname}! –í–∞—à üõé–ó–∞–∫–∞–∑üõé –≥–æ—Ç–æ–≤.")
        del user_data[user_id]
        await query.edit_message_text("–ó–∞–∫–∞–∑ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.")

    elif data.startswith("cancel_"):
        user_id = int(data.split("_")[1])
        name = user_data[user_id]['name']
        surname = user_data[user_id]['surname']
        await context.bot.send_message(chat_id=user_id, text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name} {surname}, –∏–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à üõé–ó–∞–∫–∞–∑üõé –æ—Ç–º–µ–Ω—ë–Ω.")
        del user_data[user_id]
        await query.edit_message_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")

async def notify_all_users(context: ContextTypes.DEFAULT_TYPE):
    message = (
        "üéâ –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∑—å—è! üéâ\n"
        "–ú—ã —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏! ‚òïÔ∏è‚ú®\n"
        "–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã! üõéÔ∏è\n"
        "–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–æ—Ñ–µ! ‚ù§Ô∏è"
    )
    for user_id in list(user_data.keys()):
        try:
            await context.bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def notify_server_start(context: ContextTypes.DEFAULT_TYPE):
    print("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ: —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, —Ä–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    await notify_all_users(context)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≤—ã–∑–æ–≤–æ–º JobQueue:
def main():
    TOKEN = "7982381260:AAGkAt7u-eEMYtiaYQL17fWgKgs978_3Gpg"
    app = Application.builder().token(TOKEN).build()

    # –°–æ–∑–¥–∞—ë–º JobQueue
    job_queue = app.job_queue

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", show_menu))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback, pattern="^(order)$"))
    app.add_handler(CallbackQueryHandler(handle_order_callback, pattern="^(Cappuccino|Espresso|Coffee|cancel)$"))
    app.add_handler(CallbackQueryHandler(handle_sugar_callback, pattern="^(–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞|1 –ª–æ–∂–∫–∞|2 –ª–æ–∂–∫–∏|3 –ª–æ–∂–∫–∏|cancel)$"))
    app.add_handler(CallbackQueryHandler(handle_payment_callback, pattern="^(cash|online|cancel)$"))
    app.add_handler(CallbackQueryHandler(handle_admin_callback, pattern="^(ready_|cancel_)"))

    # –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    job_queue.run_once(notify_server_start, when=0)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()



if __name__ == "__main__":
    main()
